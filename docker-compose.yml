services:
  server-slack:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=info
      - BOT_CLIENT=slack
    volumes:
      - './chars_catalog:/app_data/chars_catalog'
      - './data/chroma.db:/app_data/chroma.db'
    ports:
      - 3000:3000


  server-discord:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=info
      - BOT_CLIENT=discord
    volumes:
      - './chars_catalog:/app_data/chars_catalog'
      - './data/chroma.db:/app_data/chroma.db'
    ports:
      - 3000:3000

  server-debug:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    environment:
      - DEBUG_MODE=true
      - LOG_LEVEL=debug
    volumes:
      - './chars_catalog:/app_data/chars_catalog'
      - './data/chroma.db:/app_data/chroma.db'
    ports:
      - 3000:3000

  api:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    environment:
      - LOG_LEVEL=info
      - SQLALCHEMY_DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - USE_SQL_CHAR_DB=true
    volumes:
      - './chars_catalog:/app_data/chars_catalog'
      - './data/chroma.db:/app_data/chroma.db'
      - './alembic:/app/home/alembic'
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 10s
      timeout: 5s
      retries: 100000
    command: fluctlight_api

  db:
    build:
      dockerfile: ./docker/Dockerfile.db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/fluctlight
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 10

  backdoor:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    volumes:
      - './tmp:/tmp'
    command: fluctlight backdoor

  test:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.ci
    env_file:
      - .env
    environment:
      - INTENT_LLM_MATCHING=true
      - INTENT_CHAR_MATCHING=false
      - TEST_MODE=true
    command: ["./run_tests.sh", "${TEST_FILES:-}"]

  test-int:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.ci
    env_file:
     - .env
    environment:
      - INTENT_LLM_MATCHING=true
      - INTENT_CHAR_MATCHING=false
      - RUN_INTEGRATION_TESTS=1
      - TEST_MODE=true
    command: ["./run_tests.sh", "${TEST_FILES:-}"]

  shell:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.ci
    env_file:
     - .env
    volumes:
      - './fluctlight:/app/home/fluctlight'
      - './tests:/app/home/tests'
    command: /bin/bash -c "while true; do sleep 3600; done"

networks:
  default:
    driver: bridge

volumes:
  db:
    driver: local
